@import "./mixins/tabs.scss";
@import "./mixins/private.scss";

@mixin mq($breakpoint) {
  @if $breakpoint == xxxxl {
    @media (min-width: 120em) { @content ; } //1920
  }
  @else if $breakpoint == xxxl-2 {
    @media (min-width: 105em) { @content ; } //1680
  }
  @else if $breakpoint == xxxl {
    @media (min-width: 90em) { @content ; } //1440
  }
  @else if $breakpoint == xxl {
    @media (min-width: 80em) { @content ; } //1280
  }
  @else if $breakpoint == xl {
    @media (min-width: 71.25em) { @content ; } //1140
  }
  @else if $breakpoint == l-2 {
    @media (min-width: 64em) { @content ; } //1024
  }
  @else if $breakpoint == l {
    @media (min-width: 60em) { @content ; } //960
  }
  @else if $breakpoint == m {
    @media (min-width: 48em) { @content ; } //768
  }
  @else if $breakpoint == s {
    @media (min-width: 35.5em) { @content ; } //568
  }
  @else if $breakpoint == xs {
    @media (min-width: 30em) { @content ; } //480
  }
  @else if $breakpoint == 2x {
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
      @content;
    } //retina
  }
}

@mixin buffer($prop) {
  #{$prop}: $buffer;

  @include min-width("lg") { #{$prop}: $buffer-lg; }
}

// Currently requires an unscoped context
@mixin colorSchemeDark() {
  :global(.traitify--color-scheme-auto) {
    @media(prefers-color-scheme: dark) { @content; }
  }
  :global(.traitify--color-scheme-dark) { @content; }
}

@mixin cols($i: 12, $total: 12) {
  float: left;
  padding: 0 $gutter/2;
  width: ($i / $total) * 100%;
  box-sizing: border-box;
}

@mixin heading() {
  font-size: $font-size-heading;
  font-weight: 600;
}

@mixin max-width($name) {
  $value: map-get($breakpoints, $name);

  @media(max-width: $value) { @content; }
}

@mixin min-width($name) {
  $value: map-get($breakpoints, $name);

  @media(min-width: $value) { @content; }
}

@mixin rems($px-size) { 
  $rem-size: $px-size / $-font-size; 
  font-size: $px-size + px; 
  font-size: $rem-size + rem; 
}

@mixin theme($prop, $name) {
  #{$prop}: map-get($color-scheme-default, $name);
  #{$prop}: var(--private-traitify-#{$name});
}

// MICRO CLEARFIX HACK
%cf {
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
%fl {
  float: left;
}
%fr {
  float: right;
}
%cb {
  clear: both;
}
%center {
  text-align: center;
}
%uc {
  text-transform: uppercase;
}
%nt {
  text-transform: none;
}
%hide-sm {
  display: none;
}
%hide-text {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}
.center {
  @extend %center;
}
.clear {
  clear: both;
}
.hidden {
  display: none;
}
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

%widgetContainer{
  box-sizing: border-box;
  color: #333;
  font: 100%/1.5 "Source Sans Pro", "Open Sans", "Helvetica Neue", Verdana, Arial, sans-serif;
  font-weight: 400;
  margin: 0;
  padding: 0;
  width: 100%;
  * { box-sizing: border-box; }
  button {
    border: none;
    border-radius: 0;
    cursor: pointer;
    font-family: "Source Sans Pro", "Open Sans", "Helvetica Neue", Verdana, Arial, sans-serif;
  }
}
