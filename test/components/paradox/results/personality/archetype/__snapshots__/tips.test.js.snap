// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Paradox.PersonalityArchetypeTips renders component 1`] = `
<div
  className="container"
>
  <div
    className="tabs"
  >
    <button
      className="active"
      onClick={[Function]}
      type="button"
    >
      tip_type_for_tools, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_room, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_settings, [object Object]
    </button>
  </div>
  <select
    className="dropdown"
    onChange={[Function]}
    value="tools"
  >
    <option
      value="tools"
    >
      tip_type_for_tools, [object Object]
    </option>
    <option
      value="room"
    >
      tip_type_for_room, [object Object]
    </option>
    <option
      value="settings"
    >
      tip_type_for_settings, [object Object]
    </option>
  </select>
  <div
    className="content"
  >
    <div>
      TU - 0
    </div>
    <div>
      TU - 1
    </div>
    <div>
      TU - 2
    </div>
    <div>
      TU - 3
    </div>
    <div>
      TU - 4
    </div>
  </div>
</div>
`;

exports[`Paradox.PersonalityArchetypeTips renders component with available types 1`] = `
<div
  className="container"
>
  <div
    className="tabs"
  >
    <button
      className="active"
      onClick={[Function]}
      type="button"
    >
      tip_type_for_room, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_settings, [object Object]
    </button>
  </div>
  <select
    className="dropdown"
    onChange={[Function]}
    value="room"
  >
    <option
      value="room"
    >
      tip_type_for_room, [object Object]
    </option>
    <option
      value="settings"
    >
      tip_type_for_settings, [object Object]
    </option>
  </select>
  <div
    className="content"
  >
    <div>
      CZ - 0
    </div>
    <div>
      CZ - 1
    </div>
    <div>
      CZ - 2
    </div>
    <div>
      CZ - 3
    </div>
    <div>
      CZ - 4
    </div>
  </div>
</div>
`;

exports[`Paradox.PersonalityArchetypeTips renders component with enabled types 1`] = `
<div
  className="container"
>
  <div
    className="tabs"
  >
    <button
      className="active"
      onClick={[Function]}
      type="button"
    >
      tip_type_for_room, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_settings, [object Object]
    </button>
  </div>
  <select
    className="dropdown"
    onChange={[Function]}
    value="room"
  >
    <option
      value="room"
    >
      tip_type_for_room, [object Object]
    </option>
    <option
      value="settings"
    >
      tip_type_for_settings, [object Object]
    </option>
  </select>
  <div
    className="content"
  >
    <div>
      CZ - 0
    </div>
    <div>
      CZ - 1
    </div>
    <div>
      CZ - 2
    </div>
    <div>
      CZ - 3
    </div>
    <div>
      CZ - 4
    </div>
  </div>
</div>
`;

exports[`Paradox.PersonalityArchetypeTips renders new type from clicking button 1`] = `
<div
  className="container"
>
  <div
    className="tabs"
  >
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_tools, [object Object]
    </button>
    <button
      className="active"
      onClick={[Function]}
      type="button"
    >
      tip_type_for_room, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_settings, [object Object]
    </button>
  </div>
  <select
    className="dropdown"
    onChange={[Function]}
    value="room"
  >
    <option
      value="tools"
    >
      tip_type_for_tools, [object Object]
    </option>
    <option
      value="room"
    >
      tip_type_for_room, [object Object]
    </option>
    <option
      value="settings"
    >
      tip_type_for_settings, [object Object]
    </option>
  </select>
  <div
    className="content"
  >
    <div>
      CZ - 0
    </div>
    <div>
      CZ - 1
    </div>
    <div>
      CZ - 2
    </div>
    <div>
      CZ - 3
    </div>
    <div>
      CZ - 4
    </div>
  </div>
</div>
`;

exports[`Paradox.PersonalityArchetypeTips renders new type from selecting option 1`] = `
<div
  className="container"
>
  <div
    className="tabs"
  >
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_tools, [object Object]
    </button>
    <button
      className="active"
      onClick={[Function]}
      type="button"
    >
      tip_type_for_room, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_settings, [object Object]
    </button>
  </div>
  <select
    className="dropdown"
    onChange={[Function]}
    value="room"
  >
    <option
      value="tools"
    >
      tip_type_for_tools, [object Object]
    </option>
    <option
      value="room"
    >
      tip_type_for_room, [object Object]
    </option>
    <option
      value="settings"
    >
      tip_type_for_settings, [object Object]
    </option>
  </select>
  <div
    className="content"
  >
    <div>
      CZ - 0
    </div>
    <div>
      CZ - 1
    </div>
    <div>
      CZ - 2
    </div>
    <div>
      CZ - 3
    </div>
    <div>
      CZ - 4
    </div>
  </div>
</div>
`;

exports[`Paradox.PersonalityArchetypeTips renders nothing if disabled 1`] = `null`;

exports[`Paradox.PersonalityArchetypeTips renders nothing if no archetype 1`] = `null`;

exports[`Paradox.PersonalityArchetypeTips renders nothing if no tips 1`] = `null`;

exports[`Paradox.PersonalityArchetypeTips renders nothing if results not ready 1`] = `null`;

exports[`Paradox.PersonalityArchetypeTips thirdPerson renders component 1`] = `
<div
  className="container"
>
  <div
    className="tabs"
  >
    <button
      className="active"
      onClick={[Function]}
      type="button"
    >
      tip_type_for_tools, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_caution_zone, [object Object]
    </button>
  </div>
  <select
    className="dropdown"
    onChange={[Function]}
    value="tools"
  >
    <option
      value="tools"
    >
      tip_type_for_tools, [object Object]
    </option>
    <option
      value="caution_zone"
    >
      tip_type_for_caution_zone, [object Object]
    </option>
  </select>
  <div
    className="content"
  >
    <div>
      TP TU - 0
    </div>
    <div>
      TP TU - 1
    </div>
    <div>
      TP TU - 2
    </div>
    <div>
      TP TU - 3
    </div>
    <div>
      TP TU - 4
    </div>
  </div>
</div>
`;

exports[`Paradox.PersonalityArchetypeTips thirdPerson renders firstPerson tips if no thirdPerson tips 1`] = `
<div
  className="container"
>
  <div
    className="tabs"
  >
    <button
      className="active"
      onClick={[Function]}
      type="button"
    >
      tip_type_for_tools, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_room, [object Object]
    </button>
    <button
      className=""
      onClick={[Function]}
      type="button"
    >
      tip_type_for_settings, [object Object]
    </button>
  </div>
  <select
    className="dropdown"
    onChange={[Function]}
    value="tools"
  >
    <option
      value="tools"
    >
      tip_type_for_tools, [object Object]
    </option>
    <option
      value="room"
    >
      tip_type_for_room, [object Object]
    </option>
    <option
      value="settings"
    >
      tip_type_for_settings, [object Object]
    </option>
  </select>
  <div
    className="content"
  >
    <div>
      TU - 0
    </div>
    <div>
      TU - 1
    </div>
    <div>
      TU - 2
    </div>
    <div>
      TU - 3
    </div>
    <div>
      TU - 4
    </div>
  </div>
</div>
`;
